// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nK16SbD1uHwpGuyRoqAMNN
// Component: v6PO3t9_UwA2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: anilgu949Hy0/component
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { useScreenVariants as useScreenVariantsonqwsGpBfm6K } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ONQWSGpBfm6K/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: nK16SbD1uHwpGuyRoqAMNN/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: v6PO3t9_UwA2/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: QM6vZD-IS0PE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: AvuBveerA9hs/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: O9Uaz-soQdat/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: O9BNWTsi3y_D/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: omV8tM-UrKpt/icon
import logopng9YqBoXKtla6J from "./images/logopng.png"; // plasmic-import: 9yqBoXKtla6j/picture

createPlasmicElementProxy;

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

const $$ = {};

function PlasmicContact__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsonqwsGpBfm6K()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"contact"}
          data-plasmic-override={overrides.contact}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.contact
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uvVhL)}
          >
            <Button2
              className={classNames("__wab_instance", sty.button2__ibs6P)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__zMDef)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__oKhPl)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d7Ff6
                )}
              >
                {"Home\n"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__iR2K)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__h4TTn)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToTrending"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-4` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTrending"] != null &&
                  typeof $steps["goToTrending"] === "object" &&
                  typeof $steps["goToTrending"].then === "function"
                ) {
                  $steps["goToTrending"] = await $steps["goToTrending"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__gL8Ch)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zt80I
                )}
              >
                {"Trending"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__aPgO)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__bqJ1P)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToContact"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-5` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToContact"] != null &&
                  typeof $steps["goToContact"] === "object" &&
                  typeof $steps["goToContact"].then === "function"
                ) {
                  $steps["goToContact"] = await $steps["goToContact"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__wg5Ou)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2NuY
                )}
              >
                {"Contact"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__h1Ks2)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__a9O7V)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToShop"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToShop"] != null &&
                  typeof $steps["goToShop"] === "object" &&
                  typeof $steps["goToShop"].then === "function"
                ) {
                  $steps["goToShop"] = await $steps["goToShop"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__cxZhN)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vfd73
                )}
              >
                {"Shop"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2___5UD1Z)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__hMVeR)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToLogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-2` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__sAlKn)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cq6SX
                )}
              >
                {"Log in"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__olGSe)}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__tsLw)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToRegister"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-3` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToRegister"] != null &&
                  typeof $steps["goToRegister"] === "object" &&
                  typeof $steps["goToRegister"].then === "function"
                ) {
                  $steps["goToRegister"] = await $steps["goToRegister"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__fyZLj)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c760C
                )}
              >
                {"Sign up"}
              </div>
            </Button2>
          </p.Stack>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700, fontStyle: "italic" }}
              >
                {"Virtual Sound Industries"}
              </span>
            </React.Fragment>
          </h3>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__vLy3K)}
            displayHeight={"61px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"61px"}
            src={{
              src: logopng9YqBoXKtla6J,
              fullWidth: 600,
              fullHeight: 600,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pQuC
            )}
          >
            {"Contact us"}
          </div>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formField___6BNif)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zWybK
                )}
              >
                {"Name"}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formField__oJXsv)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zi7Lv
                )}
              >
                {"Email "}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input2),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input2", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input2", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input2.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formField__mnO5F)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iTn3F
                )}
              >
                {"Issue"}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input3),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input3", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input3", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input3.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"input3"}
                  data-plasmic-override={overrides.input3}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formField__xsUc)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z7Wij
                )}
              >
                {"In Detail"}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input4),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input4", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input4", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input4.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"input4"}
                  data-plasmic-override={overrides.input4}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <Button2
            className={classNames("__wab_instance", sty.button2__uVcUo)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            {"Enter"}
          </Button2>
          <div className={classNames(projectcss.all, sty.freeBox__v1KB)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__clBaA)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hbrYy)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nqM7P)}
                    displayHeight={"44px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"44px"}
                    src={{
                      src: logopng9YqBoXKtla6J,
                      fullWidth: 600,
                      fullHeight: 600,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__edIos)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l4QWl
                      )}
                    >
                      {"Connect with us"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fNkJu)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0HBi)}
                        role={"img"}
                      />

                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg___3Sznx)}
                        role={"img"}
                      />

                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__i92Wk)}
                        role={"img"}
                      />
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__gxF5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___94GMl)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d9OjA
                    )}
                  >
                    {"Product"}
                  </div>
                  <Button2
                    className={classNames(
                      "__wab_instance",
                      sty.button2___8EQkH
                    )}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg___39TGo)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__vOCiz)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sShgA
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__a3B3S)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__vKkVu)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__cczYk)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t1NV
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__oRbQq)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__pI07)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___44T8E)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nbpG1
                      )}
                    >
                      {"Integrations"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__nfMvv)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__b7O30)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__kIkj5)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hm9Uq
                      )}
                    >
                      {"Insights"}
                    </div>
                  </Button2>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__tn7G5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yxxdB)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mCf1N
                    )}
                  >
                    {"Support"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__fT09W)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__xIX7)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__yBjBm)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gTgCe
                      )}
                    >
                      {"Documentation"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames(
                      "__wab_instance",
                      sty.button2___3HUeV
                    )}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__fIudv)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__jXiDl)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f5Iw6
                      )}
                    >
                      {"FAQs"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__tnwSi)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__e97W4)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__gQdLa)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y8HFr
                      )}
                    >
                      {"Status"}
                    </div>
                  </Button2>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__fuGv)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lSleu)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jFugs
                    )}
                  >
                    {"Company"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__x10M)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg___4Pqqx)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__gQxq)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zIWmv
                      )}
                    >
                      {"About"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__xHNgr)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__wpvI)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__y941K)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qgdsJ
                      )}
                    >
                      {"Contact us"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__djFd1)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__inRhO)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__cCaUg)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3O16A
                      )}
                    >
                      {"Careers"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames(
                      "__wab_instance",
                      sty.button2___4OfBg
                    )}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__qnlir)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__odexK)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kLSl
                      )}
                    >
                      {"Media"}
                    </div>
                  </Button2>
                </p.Stack>
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  contact: ["contact", "h3", "input", "input2", "input3", "input4", "columns"],
  h3: ["h3"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contact") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("contact"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
