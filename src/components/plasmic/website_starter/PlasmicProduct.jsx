// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nK16SbD1uHwpGuyRoqAMNN
// Component: 7RYXHws1RNb8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: anilgu949Hy0/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { useScreenVariants as useScreenVariantsonqwsGpBfm6K } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ONQWSGpBfm6K/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: nK16SbD1uHwpGuyRoqAMNN/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: 7RYXHws1RNb8/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: O9Uaz-soQdat/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: O9BNWTsi3y_D/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: omV8tM-UrKpt/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: QM6vZD-IS0PE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: AvuBveerA9hs/icon
import logopng9YqBoXKtla6J from "./images/logopng.png"; // plasmic-import: 9yqBoXKtla6j/picture
import appleMax1JpegFrg94KvWotV from "./images/appleMax1Jpeg.jpg"; // plasmic-import: frg94KvWOT-v/picture
import appleMax3JpegQt2YaDcuPg8R from "./images/appleMax3Jpeg.jpg"; // plasmic-import: qt2yaDCUPg8R/picture
import appleMax2JpegH8M3Nkh8J0T from "./images/appleMax2Jpeg.jpg"; // plasmic-import: h8_m3NKH8j0T/picture

createPlasmicElementProxy;

export const PlasmicProduct__VariantProps = new Array();

export const PlasmicProduct__ArgProps = new Array();

const $$ = {};

function PlasmicProduct__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsonqwsGpBfm6K()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"product"}
          data-plasmic-override={overrides.product}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.product
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pXs4W)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__sXHgi)}
              displayHeight={"61px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"61px"}
              src={{
                src: logopng9YqBoXKtla6J,
                fullWidth: 600,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vvFcs
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, fontStyle: "italic" }}
                      >
                        {"Virtual Sound Industries"}
                      </span>
                    </React.Fragment>
                  </h3>
                }

                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </p.Stack>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ki9Pv)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__mqAHa)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__l0OQl)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__zfYmz)}
                      displayHeight={"44px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"44px"}
                      src={{
                        src: logopng9YqBoXKtla6J,
                        fullWidth: 600,
                        fullHeight: 600,
                        aspectRatio: undefined
                      }}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bii8R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0XOpu
                        )}
                      >
                        {"Connect with us"}
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5GtEs
                        )}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__tCqBa)}
                          role={"img"}
                        />

                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__quVwB)}
                          role={"img"}
                        />

                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__wdMNq)}
                          role={"img"}
                        />
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__lKo5Y)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9Yold)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eqWru
                      )}
                    >
                      {"Product"}
                    </div>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__n4ETp
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg___1VOz)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__tspzo)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cKQzc
                        )}
                      >
                        {"Pricing"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__yHjlq
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__vFbmR)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1ZLb9
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fgSDj
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__kMqc8
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__pzTBj)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__kwQNl)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7BNum
                        )}
                      >
                        {"Integrations"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__dXzEt
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg___0Pjm)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__nFk4Z)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tfpIl
                        )}
                      >
                        {"Insights"}
                      </div>
                    </Button2>
                  </p.Stack>
                  <textarea
                    data-plasmic-name={"textarea"}
                    data-plasmic-override={overrides.textarea}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.textarea
                    )}
                    onChange={e => {
                      p.generateStateOnChangeProp($state, [
                        "textarea",
                        "value"
                      ])(e.target.value);
                    }}
                    ref={ref => {
                      $refs["textarea"] = ref;
                    }}
                    value={
                      p.generateStateValueProp($state, ["textarea", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__n9Dp0)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j9Jzr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a6QlO
                      )}
                    >
                      {"Support"}
                    </div>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__q6VMk
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__nncpw)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__vyoD)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7AviU
                        )}
                      >
                        {"Documentation"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__ggW7E
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__nNca1)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6Ow8X
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hTnhZ
                        )}
                      >
                        {"FAQs"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__gk4O
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1B0Yv
                          )}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__yJz9)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Y5NX
                        )}
                      >
                        {"Status"}
                      </div>
                    </Button2>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__cBgZq)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xzg9E)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nUCxR
                      )}
                    >
                      {"Company"}
                    </div>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__boZUi
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__ncrTt)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__eahC)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zScSk
                        )}
                      >
                        {"About"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__tVJa
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg___4Rp)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__neh2Z)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7L9Hy
                        )}
                      >
                        {"Contact us"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__a9VN
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__iTwfx)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__vqFmS)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__game8
                        )}
                      >
                        {"Careers"}
                      </div>
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__ioG0X
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___05U1I
                          )}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__vrfMi)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mI2R9
                        )}
                      >
                        {"Media"}
                      </div>
                    </Button2>
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
            {(() => {
              const child$Props = {
                beforeChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ),
                className: classNames("__wab_instance", sty.sliderCarousel),
                initialSlide: p.generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                sliderScopeClassName: sty["sliderCarousel__slider"]
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],

                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Vev4)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___4XGxa)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "325px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "309px"
                          : "440px"
                      }
                      src={{
                        src: appleMax1JpegFrg94KvWotV,
                        fullWidth: 1000,
                        fullHeight: 1000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vc4S9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iYdmY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jg9H4
                        )}
                      >
                        {"Enter some text"}
                      </div>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___9Of0Q)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: appleMax3JpegQt2YaDcuPg8R,
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0FsHm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xEVkX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n8AyI
                        )}
                      >
                        {"Enter some text"}
                      </div>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zcYg)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: appleMax2JpegH8M3Nkh8J0T,
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                </SliderWrapper>
              );
            })()}
            <Button2
              className={classNames("__wab_instance", sty.button2__xKv4J)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__offil
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Buy"
                  : "Buy"}
              </div>
            </Button2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pW3Jz
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "AirPods Max with Smart Case and ANC, Transparency mode, Spatial audio, upto 20 hrs of playtime, Sky Blue(491936176)\n\nGain more with offers (1)\n5% Instant Discount with OneCard Credit Cards \nRead-T&C\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u20b949,990"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecorationLine: "line-through" }}
                  >
                    {"\u20b959,900"}
                  </span>
                  <React.Fragment>{" 17% off\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#E60A0A" }}
                  >
                    {"Hurry! Only few left."}
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "AirPods Max with Smart Case and ANC, Transparency mode, Spatial audio, upto 20 hrs of playtime, Sky Blue(491936176)\n\nGain more with offers (1)\n5% Instant Discount with OneCard Credit Cards Read-T&C\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u20b949,990"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecorationLine: "line-through" }}
                  >
                    {"\u20b959,900"}
                  </span>
                  <React.Fragment>{" 17% off\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#E60A0A" }}
                  >
                    {"Hurry! Only few left."}
                  </span>
                </React.Fragment>
              )}
            </div>
          </section>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ok7Wu)}
          >
            <Button2
              className={classNames("__wab_instance", sty.button2__bebjE)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__jK7F)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__cOxn)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qaSvA
                )}
              >
                {"Home\n"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__xLahh)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__xbUqH)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToTrending"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-4` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTrending"] != null &&
                  typeof $steps["goToTrending"] === "object" &&
                  typeof $steps["goToTrending"].then === "function"
                ) {
                  $steps["goToTrending"] = await $steps["goToTrending"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__bWuoL)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hoOp1
                )}
              >
                {"Trending"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__mfFtK)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__gl0Y3)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToContact"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-5` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToContact"] != null &&
                  typeof $steps["goToContact"] === "object" &&
                  typeof $steps["goToContact"].then === "function"
                ) {
                  $steps["goToContact"] = await $steps["goToContact"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__rgqzj)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rOmpn
                )}
              >
                {"Contact"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__i9Sq)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__rfq3G)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToShop"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToShop"] != null &&
                  typeof $steps["goToShop"] === "object" &&
                  typeof $steps["goToShop"].then === "function"
                ) {
                  $steps["goToShop"] = await $steps["goToShop"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg___7FFyL)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9HzHy
                )}
              >
                {"Shop"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__rqAn3)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__bU6M8)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToLogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-2` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__jdl8Z)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ngWA
                )}
              >
                {"Log in"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__lRpo6)}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg___63Ipc)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["goToRegister"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-3` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToRegister"] != null &&
                  typeof $steps["goToRegister"] === "object" &&
                  typeof $steps["goToRegister"].then === "function"
                ) {
                  $steps["goToRegister"] = await $steps["goToRegister"];
                }
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__h89Xl)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zsMJl
                )}
              >
                {"Sign up"}
              </div>
            </Button2>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  product: [
    "product",
    "h3",
    "section",
    "columns",
    "textarea",
    "sliderCarousel"
  ],

  h3: ["h3"],
  section: ["section", "columns", "textarea", "sliderCarousel"],
  columns: ["columns", "textarea"],
  textarea: ["textarea"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "product") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("product"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    textarea: makeNodeComponent("textarea"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
